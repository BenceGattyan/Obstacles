# A very much work in progress version of the code that runs in editor by itself, 
# the proper version is made to complete tests in CodeJudge, but because I don't want to input 
# a bunch of points into console each time I test and modify the code this version exists

# python3 program to find maximum number of 2D points that lie on the same line.
# obstacle3 points sharing line was built on code made by Jose Alvarado Torre (google search)
 
from collections import defaultdict
from math import gcd, sqrt
from typing import DefaultDict, List, Tuple
import sys 
import datetime
#from pycallgraph import PyCallGraph
#from pycallgraph.output import GraphvizOutput

start = datetime.datetime.now()

times = []

IntPair = Tuple[int, int]
sys.setrecursionlimit(5000)
 
#Example input points
points={
	"(0,1)"    :[0,1,4,0,2,0],
	"(2,2)"    :[2,2,1,2,3,4],
	"(4,1)"    :[4,1,3,1,1,0],
	"(4,3)"    :[4,3,1,0,0,1],
	"(6,4)"    :[6,4,0,0,1,1],
    "(9,1)"    :[9,1,1,0,0,2],
	"(9,4)"    :[9,4,2,0,0,1],
    "(9,3)"    :[9,3,0,0,0,0]
}

points = {
    "(0,0)" : [0, 0, 10, 10, 10, 10],
    "(2,0)" : [2, 0, 5, 5, 5, 5],
    "(4,0)" : [4, 0, 5, 5, 5, 5],
    "(6,0)" : [6, 0, 5, 5, 5, 5]
}

#Input points used in current test
points = {'(69,20)': [69, 20, 1260, 310, 430, 680], '(46,60)': [46, 60, 191, 172, 163, 122], '(88,57)': [88, 57, 152, 70, 194, 7], '(19,76)': [19, 76, 121, 150, 196, 199], '(39,47)': [39, 47, 170, 10, 55, 7], '(87,94)': [87, 94, 54, 160, 182, 143], '(82,84)': [82, 84, 89, 159, 190, 119], '(59,88)': [59, 88, 14, 95, 110, 30], '(96,53)': [96, 53, 85, 189, 194, 39], '(22,93)': [22, 93, 44, 127, 151, 148], '(49,41)': [49, 41, 66, 184, 197, 175], '(34,8)': [34, 8, 133, 9, 105, 25], '(58,39)': [58, 39, 162, 1, 31, 18], '(92,92)': [92, 92, 185, 140, 17, 147], '(60,92)': [60, 92, 193, 15, 116, 195], '(49,19)': [49, 19, 17, 141, 61, 108], '(26,67)': [26, 67, 180, 38, 26, 94], '(48,91)': [48, 91, 2, 60, 71, 114], '(38,21)': [38, 21, 155, 25, 142, 167], '(81,79)': [81, 79, 64, 118, 62, 11], '(91,26)': [91, 26, 99, 137, 110, 67], '(4,88)': [4, 88, 18, 54, 148, 96], '(19,73)': [19, 73, 157, 91, 43, 33], '(72,30)': [72, 30, 114, 78, 139, 73], '(19,36)': [19, 36, 96, 49, 178, 103], '(21,67)': [21, 67, 72, 168, 56, 173], '(97,79)': [97, 79, 73, 135, 52, 94], '(48,10)': [48, 10, 94, 59, 187, 196], '(5,35)': [5, 35, 114, 30, 172, 1], '(48,51)': [48, 51, 113, 26, 98, 37], '(85,79)': [85, 79, 198, 114, 11, 12], '(11,34)': [11, 34, 89, 183, 96, 83], '(80,5)': [80, 5, 8, 19, 181, 117], '(89,89)': [89, 89, 85, 99, 39, 106], '(94,6)': [94, 6, 162, 70, 70, 153], '(29,83)': [29, 83, 60, 35, 163, 94], '(53,13)': [53, 13, 174, 30, 70, 162], '(96,39)': [96, 39, 121, 196, 47, 118], '(75,35)': [75, 35, 119, 91, 125, 198], '(24,76)': [24, 76, 199, 136, 123, 129], '(11,62)': [11, 62, 46, 114, 122, 199], '(53,48)': [53, 48, 143, 168, 193, 12], '(65,78)': [65, 78, 142, 199, 77, 192], '(15,31)': [15, 31, 119, 142, 84, 92], '(87,2)': [87, 2, 56, 12, 32, 83], '(59,85)': [59, 85, 102, 45, 7, 145], '(87,91)': [87, 91, 78, 106, 159, 167], '(27,25)': [27, 25, 74, 6, 104, 60], '(4,40)': [4, 40, 40, 153, 139, 117], '(71,47)': [71, 47, 64, 59, 50, 22], '(55,43)': [55, 43, 150, 196, 83, 199], '(18,54)': [18, 54, 173, 168, 166, 101], '(7,34)': [7, 34, 45, 89, 156, 182], '(4,55)': [4, 55, 66, 41, 35, 126], '(52,81)': [52, 81, 138, 39, 180, 195], '(43,57)': [43, 57, 132, 55, 195, 73], '(8,29)': [8, 29, 166, 75, 170, 195], '(43,20)': [43, 20, 114, 138, 139, 70], '(35,26)': [35, 26, 137, 81, 50, 139], '(78,34)': [78, 34, 50, 23, 91, 120], '(30,98)': [30, 98, 128, 177, 80, 51], '(84,79)': [84, 79, 72, 172, 72, 97], '(7,66)': [7, 66, 140, 70, 154, 193], '(6,83)': [6, 83, 23, 68, 167, 127], '(28,2)': [28, 2, 64, 193, 99, 127], '(11,96)': [11, 96, 167, 45, 14, 173], '(33,54)': [33, 54, 160, 63, 168, 180], '(99,49)': [99, 49, 180, 40, 66, 117], '(99,42)': [99, 42, 113, 56, 11, 124], '(48,96)': [48, 96, 29, 1, 120, 75], '(93,88)': [93, 88, 59, 145, 149, 78], '(64,84)': [64, 84, 118, 167, 3, 45], '(16,74)': [16, 74, 198, 43, 69, 68], '(73,8)': [73, 8, 139, 147, 194, 13], '(6,82)': [6, 82, 181, 43, 148, 22], '(72,32)': [72, 32, 188, 85, 76, 192], '(60,26)': [60, 26, 150, 102, 110, 96], '(99,15)': [99, 15, 81, 68, 23, 63], '(63,26)': [63, 26, 122, 161, 55, 103], '(67,19)': [67, 19, 181, 45, 131, 183], '(48,43)': [48, 43, 20, 96, 22, 138], '(28,73)': [28, 73, 72, 5, 122, 17], '(58,21)': [58, 21, 106, 42, 148, 163], '(66,72)': [66, 72, 141, 118, 116, 95], '(49,91)': [49, 91, 9, 85, 149, 36], '(5,37)': [5, 37, 121, 166, 4, 23], '(37,50)': [37, 50, 8, 142, 11, 76], '(95,60)': [95, 60, 131, 105, 43, 11], '(98,46)': [98, 46, 91, 18, 113, 185], '(20,89)': [20, 89, 170, 125, 197, 39], '(64,85)': [64, 85, 197, 35, 195, 46], '(48,75)': [48, 75, 39, 83, 167, 46], '(77,94)': [77, 94, 134, 65, 127, 196], '(81,97)': [81, 97, 140, 197, 89, 56], '(72,95)': [72, 95, 162, 135, 125, 26], '(26,74)': [26, 74, 104, 169, 12, 40], '(39,77)': [39, 77, 124, 84, 8, 91], '(86,56)': [86, 56, 125, 44, 63, 123], '(25,88)': [25, 88, 51, 173, 162, 2], '(49,66)': [49, 66, 81, 140, 89, 4], '(42,80)': [42, 80, 25, 13, 29, 17], '(70,92)': [70, 92, 176, 93, 185, 172], '(35,39)': [35, 39, 185, 48, 24, 176], '(65,50)': [65, 50, 127, 38, 83, 149], '(87,39)': [87, 39, 187, 101, 70, 80], '(79,69)': [79, 69, 65, 120, 199, 47], '(33,79)': [33, 79, 83, 108, 102, 78], '(73,79)': [73, 79, 190, 78, 102, 83], '(8,25)': [8, 25, 107, 104, 10, 188], '(38,23)': [38, 23, 77, 76, 38, 150], '(14,20)': [14, 20, 115, 96, 134, 46], '(53,75)': [53, 75, 79, 137, 182, 65], '(46,10)': [46, 10, 198, 49, 91, 125], '(79,47)': [79, 47, 177, 104, 84, 19], '(86,27)': [86, 27, 128, 76, 44, 153], '(85,94)': [85, 94, 121, 133, 79, 62], '(81,25)': [81, 25, 23, 143, 172, 151], '(1,40)': [1, 40, 68, 42, 11, 188], '(95,13)': [95, 13, 154, 152, 118, 142], '(86,62)': [86, 62, 155, 95, 123, 80], '(59,14)': [59, 14, 106, 125, 167, 192], '(71,79)': [71, 79, 142, 135, 86, 41], '(50,7)': [50, 7, 123, 26, 100, 4], '(75,65)': [75, 65, 42, 140, 86, 17], '(99,8)': [99, 8, 71, 178, 160, 154], '(53,33)': [53, 33, 127, 143, 25, 142], '(22,38)': [22, 38, 112, 76, 98, 51], '(22,27)': [22, 27, 139, 113, 50, 103], '(9,73)': [9, 73, 23, 151, 144, 192], '(19,88)': [19, 88, 143, 88, 127, 149], '(60,82)': [60, 82, 199, 187, 29, 19], '(57,79)': [57, 79, 189, 181, 181, 23], '(45,37)': [45, 37, 31, 190, 95, 32], '(38,42)': [38, 42, 166, 168, 160, 14], '(65,77)': [65, 77, 122, 134, 104, 47], '(99,77)': [99, 77, 150, 163, 156, 133], '(26,28)': [26, 28, 25, 120, 199, 92], '(57,18)': [57, 18, 165, 0, 60, 69], '(80,24)': [80, 24, 82, 111, 10, 41], '(91,75)': [91, 75, 4, 185, 56, 74], '(48,89)': [48, 89, 53, 141, 182, 25], '(36,64)': [36, 64, 118, 97, 137, 37], '(3,78)': [3, 78, 86, 74, 53, 123], '(24,65)': [24, 65, 94, 53, 173, 56], '(82,43)': [82, 43, 144, 109, 179, 4], '(64,33)': [64, 33, 1, 150, 24, 19], '(19,86)': [19, 86, 54, 139, 128, 131], '(75,31)': [75, 31, 110, 45, 104, 53], '(77,54)': [77, 54, 97, 81, 136, 126], '(89,21)': [89, 21, 6, 197, 176, 95], '(40,81)': [40, 81, 148, 114, 168, 70], '(18,28)': [18, 28, 132, 66, 36, 80], '(34,54)': [34, 54, 2, 163, 101, 109], '(73,59)': [73, 59, 183, 91, 153, 71], '(53,23)': [53, 23, 130, 74, 171, 180], '(6,20)': [6, 20, 196, 158, 59, 164], '(91,18)': [91, 18, 94, 39, 9, 47], '(60,44)': [60, 44, 72, 17, 12, 27], '(61,8)': [61, 8, 141, 96, 50, 56], '(56,94)': [56, 94, 9, 77, 8, 120], '(69,80)': [69, 80, 84, 152, 53, 195], '(42,54)': [42, 54, 50, 37, 179, 64], '(7,53)': [7, 53, 110, 135, 170, 64], '(99,44)': [99, 44, 35, 103, 151, 155], '(19,58)': [19, 58, 190, 140, 46, 69], '(77,53)': [77, 53, 29, 174, 100, 47], '(81,84)': [81, 84, 35, 77, 132, 102], '(88,43)': [88, 43, 36, 77, 81, 144], '(73,88)': [73, 88, 19, 145, 78, 118], '(42,17)': [42, 17, 10, 128, 113, 136], '(2,72)': [2, 72, 63, 180, 82, 73], '(17,20)': [17, 20, 5, 62, 171, 1], '(14,60)': [14, 60, 156, 132, 126, 65], '(59,80)': [59, 80, 35, 45, 193, 69], '(25,4)': [25, 4, 27, 110, 88, 64], '(18,17)': [18, 17, 55, 98, 72, 188], '(19,98)': [19, 98, 3, 163, 41, 40], '(69,41)': [69, 41, 5, 17, 116, 157], '(81,76)': [81, 76, 109, 145, 9, 151], '(50,79)': [50, 79, 150, 193, 130, 73], '(22,62)': [22, 62, 152, 141, 25, 136], '(73,64)': [73, 64, 48, 167, 92, 130], '(30,77)': [30, 77, 120, 195, 106, 110], '(32,16)': [32, 16, 92, 70, 147, 134], '(77,46)': [77, 46, 25, 103, 197, 112], '(19,23)': [19, 23, 66, 129, 117, 116], '(43,98)': [43, 98, 58, 68, 71, 187], '(54,97)': [54, 97, 60, 178, 83, 53], '(15,53)': [15, 53, 53, 39, 128, 97], '(90,87)': [90, 87, 177, 17, 185, 133], '(55,21)': [55, 21, 132, 135, 128, 46], '(32,65)': [32, 65, 38, 3, 107, 108], '(26,98)': [26, 98, 161, 105, 162, 152], '(37,88)': [37, 88, 8, 171, 72, 91], '(29,99)': [29, 99, 117, 168, 148, 142], '(69,34)': [69, 34, 11, 125, 156, 28], '(27,86)': [27, 86, 66, 14, 114, 151], '(7,13)': [7, 13, 198, 144, 187, 131], '(68,37)': [68, 37, 12, 24, 143, 9], '(62,70)': [62, 70, 170, 40, 76, 130], '(64,48)': [64, 48, 182, 95, 65, 37], '(48,63)': [48, 63, 39, 132, 50, 189], '(43,29)': [43, 29, 61, 56, 155, 44], '(46,57)': [46, 57, 10, 185, 31, 73], '(64,57)': [64, 57, 126, 2, 0, 16], '(29,7)': [29, 7, 96, 136, 85, 18], '(84,60)': [84, 60, 162, 161, 47, 61], '(46,2)': [46, 2, 24, 23, 137, 84], '(73,33)': [73, 33, 184, 125, 148, 160], '(59,71)': [59, 71, 64, 109, 165, 151], '(55,47)': [55, 47, 125, 23, 74, 36], '(46,75)': [46, 75, 173, 43, 87, 35], '(41,65)': [41, 65, 67, 149, 93, 27], '(24,53)': [24, 53, 176, 42, 54, 133], '(15,66)': [15, 66, 66, 135, 16, 142], '(77,29)': [77, 29, 154, 10, 49, 152], '(67,34)': [67, 34, 130, 188, 130, 186], '(55,52)': [55, 52, 179, 149, 43, 16], '(46,84)': [46, 84, 49, 37, 60, 58], '(87,34)': [87, 34, 39, 192, 191, 141], '(85,78)': [85, 78, 133, 31, 89, 28], '(40,35)': [40, 35, 81, 115, 14, 24], '(48,30)': [48, 30, 176, 189, 132, 150], '(76,41)': [76, 41, 89, 49, 42, 47], '(46,58)': [46, 58, 199, 96, 35, 180], '(56,71)': [56, 71, 77, 188, 18, 172], '(26,39)': [26, 39, 15, 151, 69, 171], '(67,89)': [67, 89, 154, 24, 139, 0], '(41,92)': [41, 92, 137, 89, 39, 108], '(25,60)': [25, 60, 115, 86, 138, 172], '(14,92)': [14, 92, 35, 101, 1, 72], '(73,54)': [73, 54, 41, 4, 136, 53], '(67,1)': [67, 1, 13, 118, 115, 64], '(46,34)': [46, 34, 177, 198, 13, 50], '(21,11)': [21, 11, 103, 168, 136, 98], '(28,83)': [28, 83, 140, 43, 122, 84], '(67,16)': [67, 16, 176, 82, 76, 30], '(79,38)': [79, 38, 49, 83, 154, 37], '(47,66)': [47, 66, 5, 51, 192, 69], '(97,15)': [97, 15, 170, 185, 58, 178], '(84,89)': [84, 89, 171, 143, 148, 169], '(56,45)': [56, 45, 79, 128, 182, 82], '(44,5)': [44, 5, 191, 146, 39, 135], '(0,79)': [0, 79, 69, 66, 73, 3], '(57,74)': [57, 74, 174, 198, 113, 98], '(78,83)': [78, 83, 150, 123, 163, 181], '(38,24)': [38, 24, 190, 34, 184, 99], '(54,51)': [54, 51, 105, 168, 50, 143], '(97,20)': [97, 20, 43, 187, 14, 33], '(53,44)': [53, 44, 98, 93, 87, 23], '(3,60)': [3, 60, 187, 6, 108, 107], '(26,84)': [26, 84, 41, 192, 193, 199], '(50,39)': [50, 39, 164, 75, 89, 10], '(96,45)': [96, 45, 165, 186, 84, 129], '(10,85)': [10, 85, 152, 117, 15, 73], '(41,91)': [41, 91, 161, 167, 28, 63], '(55,51)': [55, 51, 193, 198, 115, 80], '(51,1)': [51, 1, 47, 43, 85, 134], '(34,16)': [34, 16, 0, 87, 101, 196], '(29,10)': [29, 10, 36, 58, 186, 138], '(77,67)': [77, 67, 154, 167, 109, 10], '(19,67)': [19, 67, 51, 101, 163, 187], '(8,97)': [8, 97, 175, 84, 83, 81], '(41,88)': [41, 88, 84, 17, 48, 183], '(36,97)': [36, 97, 82, 164, 108, 7], '(13,26)': [13, 26, 116, 55, 43, 179], '(63,67)': [63, 67, 92, 37, 4, 151], '(41,83)': [41, 83, 68, 13, 71, 106], '(10,86)': [10, 86, 136, 155, 175, 9], '(26,68)': [26, 68, 87, 170, 94, 114], '(64,36)': [64, 36, 25, 43, 74, 110], '(35,80)': [35, 80, 151, 195, 158, 149], '(94,22)': [94, 22, 172, 133, 135, 81], '(57,29)': [57, 29, 124, 175, 143, 135], '(35,35)': [35, 35, 77, 106, 1, 106], '(45,77)': [45, 77, 39, 178, 109, 131], '(62,19)': [62, 19, 93, 157, 142, 109], '(77,12)': [77, 12, 14, 186, 166, 130], '(18,59)': [18, 59, 1, 6, 55, 35], '(95,76)': [95, 76, 130, 90, 172, 2], '(16,82)': [16, 82, 159, 44, 103, 2], '(55,5)': [55, 5, 136, 40, 8, 96], '(94,78)': [94, 78, 117, 14, 20, 117], '(60,42)': [60, 42, 104, 146, 69, 82], '(52,42)': [52, 42, 100, 3, 188, 156], '(0,17)': [0, 17, 65, 90, 125, 178], '(75,55)': [75, 55, 121, 12, 76, 156], '(97,98)': [97, 98, 111, 105, 18, 98], '(48,42)': [48, 42, 94, 76, 140, 18], '(51,53)': [51, 53, 21, 179, 39, 173], '(15,48)': [15, 48, 31, 138, 63, 110], '(97,54)': [97, 54, 8, 148, 152, 73], '(85,99)': [85, 99, 67, 2, 85, 11], '(12,94)': [12, 94, 65, 177, 192, 39], '(41,36)': [41, 36, 169, 103, 109, 169], '(67,7)': [67, 7, 156, 137, 74, 120], '(33,89)': [33, 89, 112, 20, 16, 60], '(39,74)': [39, 74, 133, 21, 105, 140], '(75,49)': [75, 49, 20, 9, 153, 51], '(53,26)': [53, 26, 105, 192, 54, 189], '(70,46)': [70, 46, 198, 38, 13, 136], '(58,16)': [58, 16, 124, 147, 136, 106], '(49,2)': [49, 2, 172, 4, 98, 42], '(52,31)': [52, 31, 167, 28, 153, 9], '(74,62)': [74, 62, 62, 104, 29, 22], '(7,36)': [7, 36, 124, 123, 79, 124], '(31,20)': [31, 20, 136, 196, 104, 72], '(8,1)': [8, 1, 163, 114, 110, 148], '(39,51)': [39, 51, 154, 62, 86, 192], '(10,56)': [10, 56, 138, 188, 90, 88], '(37,5)': [37, 5, 3, 102, 131, 62], '(53,54)': [53, 54, 157, 95, 12, 149], '(23,16)': [23, 16, 14, 114, 25, 126], '(33,76)': [33, 76, 186, 132, 101, 167], '(92,36)': [92, 36, 150, 47, 122, 93], '(34,56)': [34, 56, 71, 101, 133, 135], '(11,15)': [11, 15, 161, 96, 155, 178], '(17,63)': [17, 63, 99, 189, 142, 56], '(37,80)': [37, 80, 186, 76, 34, 179], '(37,24)': [37, 24, 73, 158, 62, 68], '(53,29)': [53, 29, 186, 64, 25, 98], '(39,72)': [39, 72, 100, 79, 92, 194], '(82,85)': [82, 85, 196, 8, 97, 175], '(33,98)': [33, 98, 130, 94, 172, 161], '(53,96)': [53, 96, 78, 92, 25, 85], '(30,31)': [30, 31, 168, 92, 189, 96], '(95,85)': [95, 85, 100, 1, 110, 198], '(77,97)': [77, 97, 68, 191, 111, 63], '(91,33)': [91, 33, 151, 98, 91, 66], '(69,6)': [69, 6, 86, 24, 157, 32], '(9,93)': [9, 93, 118, 15, 17, 28], '(12,36)': [12, 36, 181, 100, 17, 126], '(37,33)': [37, 33, 85, 132, 138, 176], '(66,81)': [66, 81, 171, 102, 154, 176], '(4,83)': [4, 83, 13, 67, 181, 124], '(39,70)': [39, 70, 177, 39, 165, 38], '(40,41)': [40, 41, 50, 24, 24, 25], '(90,2)': [90, 2, 74, 110, 131, 41], '(75,2)': [75, 2, 76, 160, 81, 55], '(28,61)': [28, 61, 118, 5, 91, 50], '(56,3)': [56, 3, 84, 161, 53, 197], '(99,26)': [99, 26, 149, 42, 133, 27], '(54,54)': [54, 54, 138, 146, 121, 148], '(51,49)': [51, 49, 34, 171, 116, 176], '(23,59)': [23, 59, 59, 122, 182, 41], '(59,38)': [59, 38, 190, 199, 111, 17], '(70,9)': [70, 9, 152, 76, 110, 78], '(45,54)': [45, 54, 71, 48, 52, 172], '(58,55)': [58, 55, 2, 170, 103, 191], '(8,70)': [8, 70, 90, 108, 113, 134], '(69,38)': [69, 38, 70, 108, 123, 56], '(98,12)': [98, 12, 188, 156, 79, 6], '(52,99)': [52, 99, 66, 86, 4, 71], '(19,74)': [19, 74, 173, 199, 183, 170], '(63,16)': [63, 16, 106, 17, 138, 33], '(3,91)': [3, 91, 185, 14, 12, 143], '(87,98)': [87, 98, 105, 100, 174, 78], '(1,29)': [1, 29, 61, 83, 2, 114], '(33,25)': [33, 25, 72, 199, 68, 174], '(41,18)': [41, 18, 125, 26, 193, 173], '(97,89)': [97, 89, 86, 154, 148, 96], '(10,45)': [10, 45, 186, 123, 110, 7], '(83,69)': [83, 69, 174, 95, 195, 123], '(54,21)': [54, 21, 29, 191, 150, 86], '(80,4)': [80, 4, 114, 11, 130, 174], '(8,74)': [8, 74, 4, 131, 104, 195], '(95,24)': [95, 24, 110, 165, 62, 110], '(63,71)': [63, 71, 140, 65, 32, 129], '(99,93)': [99, 93, 42, 2, 117, 149], '(71,1)': [71, 1, 28, 199, 193, 140], '(90,4)': [90, 4, 160, 11, 106, 161], '(1,17)': [1, 17, 34, 179, 103, 146], '(6,71)': [6, 71, 181, 119, 63, 6], '(73,48)': [73, 48, 175, 185, 12, 142], '(66,7)': [66, 7, 31, 54, 188, 100], '(83,96)': [83, 96, 56, 169, 183, 52], '(74,58)': [74, 58, 37, 179, 61, 198], '(47,10)': [47, 10, 84, 95, 189, 173], '(83,12)': [83, 12, 139, 22, 53, 96], '(82,97)': [82, 97, 197, 18, 79, 91], '(64,74)': [64, 74, 46, 133, 11, 111], '(45,21)': [45, 21, 160, 128, 169, 147], '(84,83)': [84, 83, 34, 177, 90, 192], '(29,18)': [29, 18, 25, 58, 87, 163], '(80,72)': [80, 72, 138, 159, 4, 187], '(27,65)': [27, 65, 37, 145, 49, 113], '(75,80)': [75, 80, 8, 172, 5, 146], '(6,19)': [6, 19, 55, 192, 53, 87], '(31,94)': [31, 94, 105, 5, 159, 42], '(33,35)': [33, 35, 61, 83, 172, 66], '(86,65)': [86, 65, 38, 172, 72, 37], '(55,11)': [55, 11, 116, 121, 25, 129], '(91,43)': [91, 43, 31, 78, 44, 47], '(54,84)': [54, 84, 92, 51, 97, 15], '(41,25)': [41, 25, 172, 195, 79, 178], '(26,34)': [26, 34, 188, 142, 198, 74], '(53,20)': [53, 20, 166, 17, 81, 30], '(85,70)': [85, 70, 162, 176, 21, 73], '(5,93)': [5, 93, 26, 13, 174, 4], '(87,60)': [87, 60, 33, 23, 89, 21], '(32,57)': [32, 57, 143, 137, 68, 157], '(70,20)': [70, 20, 87, 156, 171, 3], '(40,45)': [40, 45, 86, 62, 81, 156], '(26,53)': [26, 53, 29, 99, 184, 92], '(75,19)': [75, 19, 93, 184, 168, 77], '(20,42)': [20, 42, 151, 144, 152, 166], '(43,16)': [43, 16, 71, 5, 35, 180], '(92,27)': [92, 27, 16, 23, 132, 84], '(58,56)': [58, 56, 40, 77, 170, 182], '(96,83)': [96, 83, 130, 51, 186, 30], '(32,78)': [32, 78, 73, 10, 115, 86], '(25,68)': [25, 68, 138, 119, 175, 48], '(42,23)': [42, 23, 70, 49, 113, 130], '(37,64)': [37, 64, 106, 9, 66, 55], '(18,82)': [18, 82, 113, 168, 151, 185], '(17,17)': [17, 17, 46, 41, 140, 79], '(53,87)': [53, 87, 139, 129, 171, 195], '(72,98)': [72, 98, 136, 192, 192, 123], '(61,27)': [61, 27, 89, 17, 173, 150], '(86,41)': [86, 41, 184, 152, 84, 140], '(1,21)': [1, 21, 106, 191, 142, 138], '(95,72)': [95, 72, 156, 111, 63, 69], '(59,22)': [59, 22, 171, 189, 56, 8], '(66,17)': [66, 17, 58, 188, 118, 85], '(95,44)': [95, 44, 1, 188, 156, 89], '(5,96)': [5, 96, 113, 195, 189, 150], '(8,60)': [8, 60, 1, 114, 9, 30], '(50,5)': [50, 5, 191, 20, 97, 129], '(89,91)': [89, 91, 25, 176, 20, 49], '(40,6)': [40, 6, 123, 21, 1, 52], '(68,1)': [68, 1, 189, 67, 100, 70], '(77,61)': [77, 61, 54, 21, 172, 136], '(3,9)': [3, 9, 25, 28, 88, 107], '(31,17)': [31, 17, 172, 64, 114, 176], '(13,98)': [13, 98, 118, 148, 177, 7], '(20,16)': [20, 16, 110, 121, 64, 174], '(37,78)': [37, 78, 11, 89, 169, 1], '(11,26)': [11, 26, 125, 16, 127, 31], '(30,32)': [30, 32, 192, 16, 3, 66], '(49,45)': [49, 45, 9, 77, 195, 176], '(8,28)': [8, 28, 40, 17, 188, 54], '(98,86)': [98, 86, 105, 17, 196, 52], '(80,87)': [80, 87, 64, 170, 40, 61], '(7,11)': [7, 11, 30, 43, 22, 173], '(82,98)': [82, 98, 161, 35, 71, 111], '(80,2)': [80, 2, 64, 70, 20, 155], '(63,21)': [63, 21, 69, 139, 55, 29], '(1,63)': [1, 63, 50, 147, 26, 185], '(53,65)': [53, 65, 169, 128, 2, 164], '(12,76)': [12, 76, 149, 132, 51, 198], '(45,62)': [45, 62, 102, 152, 9, 34], '(98,90)': [98, 90, 189, 113, 160, 44], '(21,37)': [21, 37, 167, 0, 41, 95], '(71,16)': [71, 16, 2, 100, 46, 67], '(2,97)': [2, 97, 191, 70, 48, 130], '(63,24)': [63, 24, 117, 16, 151, 45], '(98,96)': [98, 96, 169, 124, 86, 127], '(98,11)': [98, 11, 111, 53, 10, 34], '(13,57)': [13, 57, 197, 160, 10, 177], '(26,86)': [26, 86, 27, 37, 74, 191], '(89,52)': [89, 52, 65, 126, 179, 134], '(85,8)': [85, 8, 146, 75, 103, 22], '(77,76)': [77, 76, 184, 157, 43, 132], '(66,82)': [66, 82, 39, 139, 184, 55], '(55,36)': [55, 36, 85, 3, 71, 113], '(49,79)': [49, 79, 149, 119, 75, 104], '(84,50)': [84, 50, 135, 63, 189, 192], '(15,77)': [15, 77, 193, 111, 166, 155], '(90,47)': [90, 47, 129, 95, 104, 108], '(76,19)': [76, 19, 121, 10, 16, 106], '(24,84)': [24, 84, 145, 32, 176, 143], '(36,17)': [36, 17, 76, 80, 188, 142], '(98,34)': [98, 34, 176, 46, 108, 28], '(30,99)': [30, 99, 106, 130, 21, 175], '(92,2)': [92, 2, 54, 40, 167, 36], '(91,78)': [91, 78, 84, 29, 14, 21], '(23,99)': [23, 99, 179, 49, 38, 130], '(39,50)': [39, 50, 107, 186, 98, 35], '(65,52)': [65, 52, 130, 92, 149, 17], '(99,59)': [99, 59, 146, 170, 47, 172], '(44,16)': [44, 16, 68, 39, 97, 31], '(24,5)': [24, 5, 159, 175, 51, 120], '(34,98)': [34, 98, 105, 19, 109, 61], '(53,45)': [53, 45, 8, 66, 30, 96], '(37,38)': [37, 38, 151, 7, 160, 5], '(31,19)': [31, 19, 4, 75, 128, 131], '(90,88)': [90, 88, 106, 21, 43, 137], '(29,11)': [29, 11, 67, 25, 101, 49], '(33,34)': [33, 34, 123, 6, 133, 7], '(11,95)': [11, 95, 137, 158, 80, 122], '(78,20)': [78, 20, 51, 154, 113, 11], '(58,96)': [58, 96, 69, 174, 39, 133], '(77,42)': [77, 42, 46, 70, 8, 6], '(14,24)': [14, 24, 175, 101, 141, 91], '(41,28)': [41, 28, 105, 196, 52, 137], '(97,10)': [97, 10, 95, 184, 64, 2], '(43,52)': [43, 52, 110, 55, 109, 108], '(90,45)': [90, 45, 30, 190, 51, 48], '(80,76)': [80, 76, 182, 130, 130, 31], '(73,27)': [73, 27, 100, 159, 71, 57]}

pointsIN={}
pointsOUT={}

pointsIN2={}
pointsOUT2={}

source = list(points)[0] #will change later to avoid making list every time
sink = list(points)[-1] #will change later to avoid making list every time

x=1

def normalized_slope(a: IntPair, b: IntPair) -> IntPair:
    
    run = b[0] - a[0]
 
    rise = b[1] - a[1]
    
    # disregard same point in slope calculation 
    if (run == 0 and rise==0):
        return (0, 0)
    
    # Normalize by greatest common divisor.
    # math.gcd only works on positive numbers.
    gcd_ = gcd(abs(rise), abs(run))
    return (
        run // gcd_,
        rise // gcd_,
    )
 
def obstacle1(point: str) -> List[str]:
    destinations=[]
    pointCords = points[point][0:2]
    for i in points:
        try:
            iCords = points[i][0:2]
            #print(iCords,pointCords)
            
            if (iCords[0] == pointCords[0]) ^ (iCords[1] == pointCords[1]):
                destinations.append(i)

        except ValueError:
            print(i + "imaginary coordinate skipped")
            
    return destinations
    
def obstacle2(point: str) -> List[str]:
    pointCords = points[point][0:2]
    maxDist = 0
    destination = point
    
    for i in points:
        iCords = points[i][0:2]
        dist = sqrt( (iCords[0]-pointCords[0])**2 + (iCords[1]-pointCords[1])**2)
        
        if (dist > maxDist):
            maxDist = dist
            destination = i
    
    return [destination]

def obstacle3(point: str) -> List[str]:
    # You need at least 3 points to potentially have non-collinear points.
    # For [0, 2] points, all points are on the same line.
    if len(points) < 3:
        return []
 
    # Note that every line we find will have at least 2 points.
    # There will be at least one line because len(points) >= 3.
    # Therefore, it's safe to initialize to 0.
    destinations=[]
 
    a = tuple(points[point][0:2])
    # Fresh lines already have a, so default=1
    slope_bois: DefaultDict[IntPair, List[str]] = defaultdict(lambda: [])
 
    for b_index in points:
        b = tuple(points[b_index][0:2])
        slope_bois[normalized_slope(a, b)].append(b)
 
    for i in slope_bois:
        if i[0]<0:
            slope_bois[i] = sorted(slope_bois[i],key=lambda tup: tup[0], reverse=True)
        else:
            slope_bois[i] = sorted(slope_bois[i],key=lambda tup: tup[0], reverse=False)
        if i[1]<0:
            slope_bois[i] = sorted(slope_bois[i],key=lambda tup: tup[1], reverse=True)
        else:
            slope_bois[i] = sorted(slope_bois[i],key=lambda tup: tup[1], reverse=False)

    for i in slope_bois.values():
        
        if len(i)>2:         
            i = [str(j).replace(" ", "") for j in i]
            destinations.extend(i[2:])
 
    return destinations

def obstacle4(point: str) -> List[str]:
    return [list(points)[-1]]

def obstacle3ext(point: str):
    # You need at least 3 points to potentially have non-collinear points.
    # For [0, 2] points, all points are on the same line.
    if len(points) < 3:
        return [[]]
 
    # Note that every line we find will have at least 2 points.
    # There will be at least one line because len(points) >= 3.
    # Therefore, it's safe to initialize to 0.
    destinations=[]
 
    a = tuple(points[point][0:2])
    # Fresh lines already have a, so default=1
    slope_bois: DefaultDict[IntPair, List[str]] = defaultdict(lambda: [])
 
    for b_index in points:
        b = tuple(points[b_index][0:2])
        slope_bois[normalized_slope(a, b)].append(b)
 
    
    for i in slope_bois:
        if i[0]<0:
            slope_bois[i] = sorted(slope_bois[i],key=lambda tup: tup[0], reverse=True)
        else:
            slope_bois[i] = sorted(slope_bois[i],key=lambda tup: tup[0], reverse=False)
        if i[1]<0:
            slope_bois[i] = sorted(slope_bois[i],key=lambda tup: tup[1], reverse=True)
        else:
            slope_bois[i] = sorted(slope_bois[i],key=lambda tup: tup[1], reverse=False)
# =============================================================================
#     for i in slope_bois.values():
#         if len(i)>1:
#             print(i)
# =============================================================================
 
    return slope_bois.copy()
 
#startpoint = list(points)[0] #will change later to avoid making list every time

def makeGraph(startpoint): 
    
    internal1 = datetime.datetime.now()
    #print(startpoint)
    global x
    global times
    #get info on how many obstacles I can build and to where
    o1,o2,o3,o4=points[startpoint][2:6]
    to0 = datetime.datetime.now()
    #t1 = [obstacle1(startpoint),o1]
    to1 = datetime.datetime.now()
    #t2 = [obstacle2(startpoint),o2]
    to2 = datetime.datetime.now()
    #t3 = [obstacle3(startpoint),o3]
    to3 = datetime.datetime.now()
    #t4 = [obstacle4(startpoint),o4]
    to4 = datetime.datetime.now()
    obtimes = [(to1-to0).total_seconds(),
               (to2-to1).total_seconds(),
               (to3-to2).total_seconds(),
               (to4-to3).total_seconds()]
    #targets = [t1,t2,t3,t4]
    #o1,o2,o3,o4=points[startpoint][2:6]
# =============================================================================
#     targets,t1,t2,t3,t4 = [],[],[],[],[]
#     
#     
#     if o1>0:
#         t1 = [obstacle1(startpoint),o1]
#         
#     if o2>0:
#         t2 = [obstacle2(startpoint),o2]
#         
#     if o3>0:
#         t3 = [obstacle3(startpoint),o3]
#         
#     if o4>0:
#         t4 = [obstacle4(startpoint),o4]
#         
#     targets = [t1,t2,t3,t4]
#         
#     print(targets)
# =============================================================================
    t1,t2,t3,t4 = "","","",""
    if o1>0:
        t1 = obstacle1(startpoint)
    if o2>0:
        t2 = obstacle2(startpoint)
    if o3>0:
        t3 = obstacle3(startpoint)
    if o4>0:
        t4 = obstacle4(startpoint)

    targets = [[t1,o1],
               [t2,o2],
               [t3,o3],
               [t4,o4]]
# =============================================================================
#     targets = [[obstacle1(startpoint),o1],
#                [obstacle2(startpoint),o2],
#                [obstacle3(startpoint),o3],
#                [obstacle4(startpoint),o4]]
# =============================================================================
    
    #internal3 = datetime.datetime.now()
    #print(targets)
    for i in targets: #for each obstacle type
        #print(i , i[0])
        if i[1]>0: #if I have obstacles to build
            if 0<len(i[0]): #and nodes to build them to
                if len(i[0])==1: #single target
                    #print(i[0][0])
                    try:
                        pointsOUT[startpoint].append([i[0][0],0,i[1]])                         
                    except KeyError:
                        pointsOUT[startpoint] = [[i[0][0],0,i[1]]]
                        
                    try:
                        pointsIN[str(i[0][0])].append([startpoint,0,i[1]])
                    except KeyError:
                        pointsIN[str(i[0][0])] = [[startpoint,0,i[1]]]
                    
                    if not(str(i[0][0]) in pointsOUT):
                        internal2 = datetime.datetime.now()
                        times.append([(internal2-internal1).total_seconds(),obtimes,startpoint,str(i[0][0])+"s"])
                        makeGraph(str(i[0][0]))
                        
                else: #multi target
                    try:
                        pointsOUT[startpoint].append(["(x{})".format(x),0,i[1]])
                            
                    except KeyError:
                        pointsOUT[startpoint] = [["(x{})".format(x),0,i[1]]]
                        
                    pointsIN["(x{})".format(x)] = [[startpoint,0,i[1]]]
                    
                    pointsOUT["(x{})".format(x)] = []
                    
                    for0 = datetime.datetime.now()
                    for j in i[0]:
                        pointsOUT["(x{})".format(x)].append([j,0,i[1]])
                        
                        try:
                            pointsIN[j].append(["(x{})".format(x),0,i[1]])
                        except KeyError:
                            pointsIN[j] = [["(x{})".format(x),0,i[1]]]
                        
                    x+=1
                    for1 = datetime.datetime.now()
                    for j in i[0]:
                        if not(j in pointsOUT):
                            internal2 = datetime.datetime.now()
                            for2 = datetime.datetime.now()
                            loops = [(for1-for0).total_seconds(),(for2-for1).total_seconds()]
                            ha = len(targets)
                            times.append([(internal2-internal1).total_seconds(),ha ,startpoint,str(i[0][0])+"m"])
                            makeGraph(j)
                
#Get inputs and return them as a dictionary
def inputGet():
    n = int(input())
    inputs = {}
    for i in range(n):
        line = list(map(int, input().split()))
        inputs["({},{})".format(line[0],line[1])] = line
    return inputs


       
def ajacencyConversion(): 
    global pointsOUT2
    global pointsIN2
    
    #pain train choo-choo
    #gotta change the entire ajacency list to support double indexing by coords
    entries = {}
    for entry in list(pointsOUT):   #pointsOUT
        edges = {}
        for edge in pointsOUT[entry]:
            key, value = edge[0], edge[1:]
            try:
                edges[key][1] += value[1]
            except KeyError:
                edges[key] = value
        entries[entry] = edges
    pointsOUT2 = entries
    
    entries = {}
    for entry in list(pointsIN):   #pointsIN
        edges = {}
        for edge in pointsIN[entry]:
            key, value = edge[0], edge[1:]
            try:
                edges[key][1] += value[1]
            except KeyError:
                edges[key] = value
        entries[entry] = edges
    pointsIN2 = entries


queue = []
def enqueue(e):
    queue.append(e)

def dequeue():
    return queue.pop(0)

def solve(s):
    enqueue([s,True])
    
    visited = list(points)
    visited.extend(["(x{})".format(i+1) for i in range(x-1)])
    visited = [[visited[i]] for i in range(len(visited))]
    [visited[i].append(False) for i in range(len(visited))]
    visited = dict(visited)
    
    visited[s] = True
    
    prev = dict.fromkeys(visited, None)
    
    while bool(queue):
        node = dequeue()
        neighbours = []
        #print(node)
        try:
            if node[1]: #outgoing edge path
                
                #print(node, "<-", pointsOUT2[node])
                for i in list(pointsOUT2[node[0]]):
                    #print("::",pointsOUT2[node[0]][i])
                    if pointsOUT2[node[0]][i][1]>0:
                        
                        neighbours.append([i,True])
                        #cry about the syntax I don't care
            else:
                
                #print(node, "<-",pointsIN2[node])
                for i in list(pointsIN2[node[0]]):
                    #print("::",pointsIN2[node[0]][i])
                    if pointsIN2[node[0]][i][0]>0:
                        neighbours.append([i,False])
        except KeyError:
            pass
        
        for i in neighbours:
            if(not visited[i[0]]):
                enqueue(i)
                visited[i[0]] = True
                prev[i[0]] = node
    #print("result: ", prev)
    return prev

def reconstructPath(s, e, prev):
    path = []
    path.append([e])
    #print(e)
    e = prev[e]
    
    while e!=None:
        #print(e)
        path.append(e)
        try:
            e = prev[e[0]]
        except TypeError:
            e = None
    
    path.reverse()
    
    #print(path,prev)
    
    if list(path)[0][0] == s:
        return path
    return []

def BFS(s, e):
    prev = solve(s)
    return reconstructPath(s, e, prev)

def edmondsKarp(s,e):

    path = BFS(s,e)
    #print(path)
    #yes=True
    while bool(path):
        weights=[]
        first = True
        for i in path: #find all available capacity/invard flow
            if first:
                prev = i
                first = False
            else:
                if prev[1]: #path forward direction
                    edge = pointsOUT2[prev[0]][i[0]]
                    weights.append(edge[1])
                else:
                    edge = pointsIN2[i[0]][prev[0]]
                    weights.append(edge[0])
                prev = i
        
        flow = min(weights) #find minimum of it
        #print(weights, flow)
        
        first = True
        for i in path: #add it to path
            if first:
                prev = i
                first = False
            else:
                if prev[1]: #path forward direction
                    pointsOUT2[prev[0]][i[0]][0] += flow
                    pointsOUT2[prev[0]][i[0]][1] -= flow
                    
                    pointsIN2[i[0]][prev[0]][0] += flow
                    pointsIN2[i[0]][prev[0]][1] -= flow
                    
                else:
                    pointsIN2[prev[0]][i[0]][0] -= flow
                    pointsIN2[prev[0]][i[0]][1] += flow
                    
                    pointsOUT2[i[0]][prev[0]][0] -= flow
                    pointsOUT2[i[0]][prev[0]][1] += flow
                    
                prev = i
        #yes=False
        path = BFS(s,e)
        #print(path)
    
    result = 0
    for edge in list(pointsIN2[e]):
        result += pointsIN2[e][edge][0]
    return result

def inputGet():
    n = int(input())
    pp = {}
    for i in range(n):
        line = list(map(int, input().split()))
        pp["({},{})".format(line[0],line[1])] = line
    return pp



def manhattan2():
    pp={}
    inp=[x for x in input().split("\n")]
    n = int(inp.pop(0))
    for i in range(n):
        line = list(map(int,inp[i].split()))
        pp["({},{})".format(line[0],line[1])] = line
    return pp

#points = inputGet()

stop1 = datetime.datetime.now()

print("inputs and setup: ", stop1-start)

source = list(points)[0] #will change later to avoid making list every time
sink = list(points)[-1] #will change later to avoid making list every time


makeGraph(source)

stop2 = datetime.datetime.now()
print("Graph Drawn: ", stop2-stop1)

ajacencyConversion()

stop3 = datetime.datetime.now()
print("Graph Conversion: ", stop3-stop2)
print(edmondsKarp(source,sink))

stop4 = datetime.datetime.now()

print("MaxFlow Solved: ", stop4-stop3)
print("Total: ", stop4-start)

